esphome:
  name: human-detector
  includes:
    - mmWaveRadar.h
    - protocol_values.h
  # libraries:
  #   - "seeed-studio/Seeed Arduino rpcUnified@^2.1.4"
    
esp8266:
  board: d1_mini

# Enable logging
logger:
  baud_rate: 0
  hardware_uart: UART0_SWAP
  
# Enable Home Assistant API
api:
  encryption:
    key: "4bn4fHRXsNCTWVHaWmw2vhsTEk5I8/HxEIv/ceMc+0s="

ota:
  password: "aa74dab5a90d51d39837cccd4be2112e"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Home-Wifi Fallback Hotspot"
    password: "T4fomkuKVCJ6"


uart:
  id: uart1
  tx_pin: TX
  rx_pin: RX
  baud_rate: 9600
  # debug:
  #   direction: BOTH
  #   dummy_receiver: false
  #   after:
  #     bytes: 1



custom_component:
  - lambda: |-
      return {new HumanPresenceRadar(id(uart1))};
    components:
      - id: mmWave


binary_sensor:
  - platform: gpio
    pin: D1
    name: "Human presense PIN"
    device_class: PRESENCE

  - platform: gpio
    pin: D2
    name: "Human active PIN"


sensor:
  - platform: custom
    lambda: |-
      auto uart_component = static_cast<HumanPresenceRadar *>(mmWave);
      return {uart_component->body_movement};
    sensors:
      name: "Body movement description"
      unit_of_measurement: "%"
      accuracy_decimals: 0
  
text_sensor:
  - platform: custom
    lambda: |-
      auto uart_component = static_cast<HumanPresenceRadar *>(mmWave);
      return {uart_component->heart_beat_sensor};
    text_sensors:
      name: "Heart Beat information"
  - platform: custom
    lambda: |-
      auto uart_component = static_cast<HumanPresenceRadar *>(mmWave);
      return {uart_component->approching_away_sensor};
    text_sensors:
      name: "Approaching away state"
  - platform: custom
    lambda: |-
      auto uart_component = static_cast<HumanPresenceRadar *>(mmWave);
      return {uart_component->device_id, uart_component->sw_version, uart_component->hw_version, uart_component->protocol_version, uart_component->scene_settings};
    text_sensors:
      - name: "Device ID"
      - name: "Software version"
      - name: "Hardware version"
      - name: "Protocol version"
      - name: "Scene settings"


button:
  - platform: template
    name: "Reboot radar"
    on_press:
      lambda: 'static_cast<HumanPresenceRadar *>(mmWave)->reboot();'
  - platform: template
    name: "Get radar device ID"
    on_press:
      lambda: 'static_cast<HumanPresenceRadar *>(mmWave)->get_radar_device_id();'
  - platform: template
    name: "Get radar software version"
    on_press:
      lambda: 'static_cast<HumanPresenceRadar *>(mmWave)->get_radar_sw_version();'
# It seems that this functionality has some bug on the radar side.
  # - platform: template
  #   name: "Get radar hardware version"
  #   on_press:
  #     lambda: 'static_cast<HumanPresenceRadar *>(mmWave)->get_radar_hw_version();'
  # - platform: template
  #   name: "Get radar protocol version"
  #   on_press:
  #     lambda: 'static_cast<HumanPresenceRadar *>(mmWave)->get_radar_protocol_version();'
  
